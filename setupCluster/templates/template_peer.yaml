# apiVersion: extensions/v1beta1
# kind: Deployment
# metadata:
#   namespace: $namespace
#   name: $podName-couchdb
# spec:
#   replicas: 1
#   strategy: {}
#   template:
#     metadata:
#       creationTimestamp: null
#       labels:
#        app: hyperledger
#        role: couchdb
#        org: $namespace
#     spec:
#       # nodeSelector:
#       #   # assume all org node can access to docker
#       #   org: $namespace
#       containers:
#       - name: couchdb
#         image: hyperledger/fabric-couchdb:x86_64-$version
#         ports:
#          - containerPort: 5984

#         volumeMounts:
#          - mountPath: /opt/couchdb/data
#            name: db

#       volumes:
#        - name: db
#          hostPath:
#            path: $shareFolder/couchdb/$namespace/$peerID

# ---

apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  namespace: $namespace
  name:	$podName
spec:
  replicas: 1
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
       app: hyperledger
       role: peer
       peer-id: $peerID
       org: $namespace
    spec:
      # nodeSelector:
      #   # assume all org node can access to docker
      #   org: $namespace
      containers:

      - name: couchdb
        image: hyperledger/fabric-couchdb:x86_64-$version
        ports:
         - containerPort: 5984

        # volumeMounts:
        #  - mountPath: /opt/couchdb/data
        #    name: db

      - name: $podName 
        image: hyperledger/fabric-peer:x86_64-$version
        env:
        # - name: CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE
        #   value: cbr0
        - name: CORE_LEDGER_STATE_STATEDATABASE
          # value: "CouchDB"
          value: "LevelDB"
        - name: CORE_LEDGER_STATE_COUCHDBCONFIG_COUCHDBADDRESS
          value: "localhost:5984"
          # value: "$peerID-couchdb.$namespace:5984"
        - name: CORE_VM_ENDPOINT
          value: "unix:///host/var/run/docker.sock"
        - name: CORE_LOGGING_LEVEL
          value: "DEBUG"
        - name: CORE_PEER_TLS_ENABLED
          value: "$tlsEnabled"
        - name: CORE_PEER_GOSSIP_USELEADERELECTION
          value: "true"
        - name: CORE_PEER_GOSSIP_ORGLEADER
          value: "false" 
        - name: CORE_PEER_PROFILE_ENABLED
          value: "true"
        - name: CORE_PEER_TLS_CERT_FILE
          value: "/etc/hyperledger/fabric/tls/server.crt" 
        - name: CORE_PEER_TLS_KEY_FILE
          value: "/etc/hyperledger/fabric/tls/server.key"
        - name: CORE_PEER_TLS_ROOTCERT_FILE
          value: "/etc/hyperledger/fabric/tls/ca.crt"
        - name: CORE_PEER_ID
          value: $corePeerID
        - name: CORE_PEER_TLS_SERVERHOSTOVERRIDE
          value: $corePeerID
        - name: CORE_PEER_ADDRESS
          value: $peerAddress
        # - name: CORE_PEER_CHAINCODELISTENADDRESS
          # value: $peerCCAddress
        - name: CORE_PEER_GOSSIP_EXTERNALENDPOINT
          value: $peerGossip
        - name: CORE_PEER_LOCALMSPID
          value: $localMSPID
        - name: CORE_PEER_MSPCONFIGPATH
          value: /etc/hyperledger/fabric/msp
        - name: CORE_PEER_ADDRESSAUTODETECT
          value: "$addressAutoDetect"

        workingDir: /opt/gopath/src/github.com/hyperledger/fabric/peer
        ports:
         - containerPort: 7051
         - containerPort: 7052
         - containerPort: 7053
        command: ["/bin/bash", "-c", "--"]
        # args: ["sleep 5; peer node start"]
        args: ["sleep 5; peer node $peerCmd"] 
        volumeMounts:
         #- mountPath: /opt/gopath/src/github.com/hyperledger/fabric/peer/channel-artifacts 
         #  name: certificate
         #  subPath: channel-artifacts
         - mountPath: /etc/hyperledger/fabric/msp 
           name: certificate

         # - mountPath: /var/hyperledger/production
         #   name: data
           #subPath: crypto-config/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/msp
           # subPath: $mspPath
         - mountPath: /etc/hyperledger/fabric/tls
           name: tlscertificate
         #   #subPath: crypto-config/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/
         #   subPath: $tlsPath
         - mountPath: /host/var/run/
           name: run
      volumes:
       - name: certificate
         hostPath:
           path: $path/msp
         # persistentVolumeClaim:
         #     claimName: $pvName
       - name: tlscertificate
         hostPath:
           path: $path/tls

       - name: data
         hostPath:
           # path: $shareFolder/peer/$namespace/$peerID
           # persistent in its own node
           path: /data/peer/$namespace/$peerID

       - name: run
         hostPath:
           path: /var/run
       
       - name: db
         hostPath:
           # path: $shareFolder/couchdb/$namespace/$peerID
           path: /data/couchdb/$namespace/$peerID
       

# ---
# apiVersion: v1
# kind: Service
# metadata:
#    namespace: $namespace
#    name: $peerID
# spec:
#  selector:
#    app: hyperledger
#    role: peer
#    peer-id: $peerID
#    org: $namespace
#  clusterIP: None
#  ports:
#    - name: listen-endpoint
#      protocol: TCP
#      port: 7051

#    - name: chaincode-listen
#      protocol: TCP
#      port: 7052

#    - name: event-listen
#      protocol: TCP
#      port: 7053

---

apiVersion: v1
kind: Service
metadata:
   namespace: $namespace
   name: $peerID
spec:
 selector:
   app: hyperledger
   role: peer
   peer-id: $peerID
   org: $namespace
 type: NodePort
 # type: ClusterIP
 ports:
   - name: externale-listen-endpoint
     protocol: TCP
     port: 7051
     targetPort: 7051
     nodePort: $nodePort1

   - name: chaincode-listen
     protocol: TCP
     port: 7052
     targetPort: 7052
     nodePort: $nodePort2

   - name: listen
     protocol: TCP
     port: 7053
     targetPort: 7053
     nodePort: $nodePort3




# apiVersion: v1
# kind: Service
# metadata:
#    namespace: $namespace
#    name: $peerID-couchdb
# spec:
#  selector:
#    app: hyperledger
#    role: couchdb
#    org: $namespace
#  # type: NodePort
#  type: ClusterIP
#  ports:

#    - name: listen
#      protocol: TCP
#      port: 5984
#      targetPort: 5984
#      # nodePort: $nodePort3

# ---